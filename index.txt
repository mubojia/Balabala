
GIT分布式管理系统、svn集中式管理系统
存档、多终端访问、团队协作
git version 查看版本号
/r/n window换行符
/n   liux换行符

========================================================

【git】工作流
--- $ git init  将改目录变为git可管理的仓库
--- ls -al 查看是否存在/.git文件
--- 工作区
--- 建立或改动后文件
--- $ git add 文件名
--- 暂存区
--- $ git commit -m文件描述
--- 历史区

1、git clone 仓库地址
2、修改工作区文件
3、git -add -A
4、$ git commit -m 文件描述
5、git push origin master

========================================================

【建立仓库的方法】
1、在git上建立仓库，然后将仓库克隆至本地
2、在git上fork别人的项目，然后将仓库克隆至本地
3、在本地建立仓库，与git相关联
至此是将自己本地的修改项和自己的远程仓库同步，若想将本地代码和远程母仓库同步，需提交 pull request 申请，提示母仓库拉取你远程提交的申请。

========================================================

【学习git分支】
http://learngitbranching.js.org/

========================================================

mkdir 文件夹名称-----------------建立空文件夹
touch 文件名称 -------------------建立新文件
pwd ----------------------------------当前所在目录路径
ls -al ---------------------------------查看所有文件，包含隐藏文件
ls -------------------------------------查看当前目录下所有非隐藏文件
echo xxx > index.html -----------将xxx写入index.html文件中，如果index.html不存在，自动建立并写入；如果存在将清空index.html中的文字，并写入xxx。
echo www > index.html ---------将www追加写入index.html中，原文不变
git add -A ---------------------------将所有更改添加至暂存区
git commit -m ----------------------将更改和文件描述提交至历史区
git commit -a -m -------------------将fong作曲和暂存区更改的文件提交至历史区
 git log --oneline --graph --decorate --all 显示历史提交记录-显示精简记录-显示分支处理合并图-显示头指针位置-显示所有

 【创建分支与合并】
git checkout -b dev ---------------创建dev分支并切换到dev分支
git branch dev ---------------------创建dev分支
git checkout dev ------------------切换到dev分支
git branch ---------------------------查看当前分支，带有*号的为当前分支
git merge dev ---------------------合并dev分支（快进模式提交）
git branch -d dev -----------------删除dev分支
git branch --abort -----------------放弃合并
doskey /history -------------------产看操作历史
git merge --no-ff -m"提交信息" dev --------------------合并dev分支（非快进模式提交）会在分支历史记录提交信息

【分支策略】
git stash ----------------------------储存工作区和暂存区到当前的工作分支，用于保存未完成的工作
git stash list ------------------------列出所有保存的工作台
git stash apply---------------------恢复应用未完成的工作台，保存的工作台不删除
git stash apply stash@{0} -----恢复应用指定id的工作台
git stash pop ----------------------恢复应用未完成的工作台，同时删除保存的工作台
git stash clear --------------------删除所有的工作台

【标签】
git tag v1.0 ------------------------给当前的conmint添加标签
git tag v1.0 commitID-----------给指定的conmint添加标签
git tag -a v1.0 -m"标签描述 " commitID-----------给指定的conmint添加带有描述的标签
git tag ------------------------------查看所有的标签
git show ---------------------------查看该对象所有的信息

git status    查看状态 
git status -s 查看简易状态

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git
reset --hard commot_id。
穿梭前，用git reflog查看提交历史，以便确定要回退到那个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来哪个版本。
git log --oneline --grep='index.html'

git reset -mixed:此为默认方式，不带任何参数的git reset，即时这种方式，他回退到某个版本，工作区不变，回退历史区和暂存区。
git reset -soft:回退到某个版本，只回退了历史区的信息，工作区和暂存区都不变。
git reset -hard:彻底会退到某个版本，回退工作区、历史区和暂存区。

git reset -mixed:此为默认方式，不带任何参数的git reset，即时这种方式，他回退到某个版本，工作区不变，回退历史区和暂存区。
（这个命令可以删除未push过的add暂存和commit提交，但是工作区也就是你所改的代码仍然还在。）

git reset -soft:回退到某个版本，只回退了历史区的信息，工作区和暂存区都不变。
（这个命令可以删除未push过的commit提交，add过的文件记录仍然在、工作区也就是你所改的代码也仍然还在。）

git reset -hard:彻底会退到某个版本，回退工作区、历史区和暂存区。
（这个命令可以删除未push过的所有提交，让你的工作区、暂存区、历史区彻底回到某个版本，和之前的版本间所修改的内容会全部被遗弃）

过滤日志
git log --oneline -2 显示多少行
git log --oneline -2 --grep='index.html' 过滤
git log --oneline -2 --author='root' 作者
git log --oneline -2 --author='root' --before='2015-6-6'
git log --oneline -2 --author='root' --before='one week'
git log --oneline -2 --author='root' --before='three days' 日期之前
git log --oneline -2 --author='root' --graph 图形化







